<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Michael-F-Bryan</title><link>https://adventures.michaelfbryan.com/posts/</link><description>Recent content in Posts on Michael-F-Bryan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 01 Apr 2025 09:19:10 +0800</lastBuildDate><atom:link href="https://adventures.michaelfbryan.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Link Time Dependency Injection</title><link>https://adventures.michaelfbryan.com/posts/the-linker-trick/</link><pubDate>Sun, 30 Mar 2025 12:59:58 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/the-linker-trick/</guid><description>&lt;p>Have you ever been in a situation where, because of how the code is structured, it&amp;rsquo;s practically impossible to inject a dependency into the component that needs it? Even global variables - ubiquitously reviled for their ability to do &amp;ldquo;spooky action at a distance&amp;rdquo; - weren&amp;rsquo;t spooky enough.&lt;/p>
&lt;p>In this article, I&amp;rsquo;ll share a technique I discovered while working on a WebAssembly-based CAD package that allows for dependency injection at link time. This technique is particularly useful when traditional dependency injection methods aren&amp;rsquo;t available or practical.&lt;/p></description></item><item><title>Reboot Friendly Projects - Building Systems That Let You Disappear (and Come Back)</title><link>https://adventures.michaelfbryan.com/posts/reboot-friendly-projects/</link><pubDate>Sat, 29 Mar 2025 12:59:58 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/reboot-friendly-projects/</guid><description>&lt;p>You get an idea. You get excited. You start building.&lt;/p>
&lt;p>Then one day — you stop.&lt;/p>
&lt;p>No dramatic reason. No catastrophic failure. Just&amp;hellip; gone. You forget about it. Or you can&amp;rsquo;t bear to look at it. Or you move on. And when you do want to come back, you can&amp;rsquo;t remember what anything meant or why you even cared.&lt;/p>
&lt;p>This isn&amp;rsquo;t a lack of discipline. It&amp;rsquo;s just a natural part of working on long-term or creative projects.&lt;/p></description></item><item><title>Embracing a New Chapter: My Farewell to Wasmer and the Journey Ahead</title><link>https://adventures.michaelfbryan.com/posts/farewell-wasmer/</link><pubDate>Tue, 30 Jan 2024 17:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/farewell-wasmer/</guid><description>&lt;h2 id="introduction">
 Introduction
 &lt;a class="heading-link" href="#introduction">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>My journey at Wasmer has been a profound chapter in my life, filled with both incredible achievements and challenging moments. It&amp;rsquo;s time for me to share an important decision about my career and the path I&amp;rsquo;m choosing to embark on.&lt;/p>
&lt;h2 id="the-journey-at-wasmer">
 The Journey at Wasmer
 &lt;a class="heading-link" href="#the-journey-at-wasmer">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Wasmer, though a small company, has enabled us to achieve some pretty impressive feats together.&lt;/p></description></item><item><title>GitHub Actions can't access private repos? Here's how to fix it</title><link>https://adventures.michaelfbryan.com/posts/configuring-cargo-auth-in-github-actions/</link><pubDate>Tue, 13 Sep 2022 12:01:45 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/configuring-cargo-auth-in-github-actions/</guid><description>&lt;p>When developing locally, you can add a private GitHub repository to your Rust
crate as a &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories" class="external-link" target="_blank" rel="noopener">&lt;code>git&lt;/code> dependency&lt;/a> and &lt;code>cargo&lt;/code> should be able to retrieve it
just fine.&lt;/p>
&lt;p>However, when you push your changes to GitHub and run CI, GitHub Actions can
run into authentication issues when trying to build your crate.&lt;/p>
&lt;p>This is the error message I was fighting for a good part of today:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ cargo check --workspace --verbose --locked
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Updating git repository &lt;span style="color:#e6db74">`&lt;/span>https://github.com/Michael-F-Bryan/my-secret-repo.git&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Running &lt;span style="color:#e6db74">`&lt;/span>git fetch --force --update-head-ok &lt;span style="color:#e6db74">&amp;#39;https://github.com/Michael-F-Bryan/my-secret-repo.git&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;+HEAD:refs/remotes/origin/HEAD&amp;#39;&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Error: failed to get &lt;span style="color:#e6db74">`&lt;/span>internal-crate&lt;span style="color:#e6db74">`&lt;/span> as a dependency of package &lt;span style="color:#e6db74">`&lt;/span>some-crate v0.1.4 &lt;span style="color:#f92672">(&lt;/span>/home/runner/work/some-crate/some-crate/crates/cli&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failed to load source &lt;span style="color:#66d9ef">for&lt;/span> dependency &lt;span style="color:#e6db74">`&lt;/span>internal-crate&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Unable to update https://github.com/Michael-F-Bryan/my-secret-repo.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failed to clone into: /home/runner/.cargo/git/db/my-secret-repo-20c1af0756e23bf7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caused by:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process didn&lt;span style="color:#e6db74">&amp;#39;t exit successfully: `git fetch --force --update-head-ok &amp;#39;&lt;/span>https://github.com/Michael-F-Bryan/my-secret-repo.git&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>+HEAD:refs/remotes/origin/HEAD&lt;span style="color:#e6db74">&amp;#39;` (exit status: 128)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> --- stderr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> fatal: could not read Username for &amp;#39;&lt;/span>https://github.com&lt;span style="color:#e6db74">&amp;#39;: No such device or address
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">Error: The process &amp;#39;&lt;/span>/home/runner/.cargo/bin/cargo&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> failed with exit code &lt;span style="color:#ae81ff">101&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cargo can&amp;rsquo;t check out my private repository!&lt;/p></description></item><item><title>Announcing Cargo WAPM</title><link>https://adventures.michaelfbryan.com/posts/announcing-cargo-wapm/</link><pubDate>Sun, 07 Aug 2022 16:14:07 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/announcing-cargo-wapm/</guid><description>&lt;p>While at Hammer of the Gods, we wrote &lt;em>a lot&lt;/em> of Rust code that gets compiled to
WebAssembly for use in our containerization technology, Rune.&lt;/p>
&lt;p>We have over 30 different processing blocks (chunks of code that can be used in
a data processing pipeline) and as you can imagine, publishing and versioning
each of WebAssembly module manually isn&amp;rsquo;t practical. For that, we lean on the
&lt;a href="https://wapm.io/" class="external-link" target="_blank" rel="noopener">WebAssembly Package Manager&lt;/a> to do all the heavy lifting.&lt;/p></description></item><item><title>Bringing include_dir Into the Modern Era</title><link>https://adventures.michaelfbryan.com/posts/bringing-include_dir-into-the-modern-era/</link><pubDate>Thu, 06 Jan 2022 09:57:09 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/bringing-include_dir-into-the-modern-era/</guid><description>&lt;p>Way back in mid-2017 I created &lt;a href="https://crates.io/crates/include-dir" class="external-link" target="_blank" rel="noopener">a crate called &lt;code>include_dir&lt;/code>&lt;/a> with
a single goal in mind - give users an &lt;code>include_dir!()&lt;/code> macro that lets them
embed an entire directory in their binary.&lt;/p>
&lt;p>By most metrics, we&amp;rsquo;ve been doing phenomenally well. The crate has received a
fair amount of engagement on GitHub via pull requests and issues, and it has had
over 1 million downloads and 127 direct dependents published to crates.io alone.&lt;/p></description></item><item><title>Common Newbie Mistakes and Bad Practices in Rust: Bad Habits</title><link>https://adventures.michaelfbryan.com/posts/rust-best-practices/bad-habits/</link><pubDate>Mon, 27 Sep 2021 18:30:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/rust-best-practices/bad-habits/</guid><description>&lt;p>When you are coming to Rust from another language you bring all your previous
experiences with you.&lt;/p>
&lt;p>Often this is awesome because it means you aren&amp;rsquo;t learning programming from
scratch! However, you can also bring along bad habits which can lead you down
the wrong rabbit hole or make you write bad code.&lt;/p>

&lt;div class="notices note" >
 &lt;p>The code written in this article is available on the Rust Playground using the
various &lt;a href="https://play.rust-lang.org/" class="external-link" target="_blank" rel="noopener">(playground)&lt;/a> links dotted throughout. Feel free to browse
through and steal code or inspiration.&lt;/p></description></item><item><title>Daily Rust: Iterators</title><link>https://adventures.michaelfbryan.com/posts/daily/iterators/</link><pubDate>Tue, 24 Aug 2021 03:55:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/daily/iterators/</guid><description>&lt;p>Iterators are part of Rust&amp;rsquo;s secret sauce. They power things from the humble
for-loop to the elegant iterator chain, but have you ever stopped to think how
they work?&lt;/p>
&lt;p>Let&amp;rsquo;s find out more about Rust&amp;rsquo;s iterators by implementing our own versions of
common iterators and reading the standard library&amp;rsquo;s source code.&lt;/p>

&lt;div class="notices info" >
 &lt;p>The code written in this article is available on the Rust Playground using the
various &lt;a href="https://play.rust-lang.org/" class="external-link" target="_blank" rel="noopener">(playground)&lt;/a> links dotted throughout. Feel free to browse
through and steal code or inspiration.&lt;/p></description></item><item><title>Daily Rust: Slice Patterns</title><link>https://adventures.michaelfbryan.com/posts/daily/slice-patterns/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://adventures.michaelfbryan.com/posts/daily/slice-patterns/</guid><description>&lt;p>&lt;a href="https://blog.rust-lang.org/2018/05/10/Rust-1.26.html#basic-slice-patterns" class="external-link" target="_blank" rel="noopener">Rust 1.26&lt;/a> introduced a nifty little feature called &lt;em>Basic Slice
Patterns&lt;/em> which lets you pattern match on slices with a known length. Later on
in &lt;a href="https://blog.rust-lang.org/2020/03/12/Rust-1.42.html#subslice-patterns" class="external-link" target="_blank" rel="noopener">Rust 1.42&lt;/a>, this was extended to allow using &lt;code>..&lt;/code> to match on
&amp;ldquo;everything else&amp;rdquo;.&lt;/p>
&lt;p>As features go this may seem like a small addition, but it gives developers an
opportunity to write much more expressive code.&lt;/p>

&lt;div class="notices note" >
 &lt;p>The code written in this article is available in the various playground links
dotted throughout. Feel free to browse through and steal code or inspiration.&lt;/p></description></item><item><title>Deserializing Binary Data Files in Rust</title><link>https://adventures.michaelfbryan.com/posts/deserializing-binary-data-files/</link><pubDate>Sun, 20 Jun 2021 00:30:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/deserializing-binary-data-files/</guid><description>&lt;p>The other day, someone on the Rust user forums posted &lt;a href="https://users.rust-lang.org/t/deserializing-a-dat-binary-file-created-in-cpp/61263" class="external-link" target="_blank" rel="noopener">a question&lt;/a>
that really nerd-sniped me. They had data generated by a C++ program and were
wanting to load it into a Rust program, but when asked what format the data was
in the author didn&amp;rsquo;t provide some something like a JSON schema or Protobuf file,
instead they just got the definition for a C struct.&lt;/p>
&lt;p>A common method for &amp;ldquo;serializing&amp;rdquo; data in C is to create a struct and directly
write its bytes into a file, the &amp;ldquo;deserializing&amp;rdquo; is just a case of reading the
data out of the file and interpreting it as your type. This technique is
actually kinda genius when you think about it, it makes no intermediate copies
or heap allocations because the OS&amp;rsquo;s &lt;code>read()&lt;/code> function will literally write your
data to its destination, and there are no extra dependencies or complicated
serialization frameworks involved.&lt;/p></description></item><item><title>Parsing PDF Documents in Rust</title><link>https://adventures.michaelfbryan.com/posts/parsing-pdfs-in-rust/</link><pubDate>Sun, 31 Jan 2021 21:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/parsing-pdfs-in-rust/</guid><description>&lt;p>In my spare time I&amp;rsquo;m a volunteer with my state&amp;rsquo;s emergency services and we
have our own web app for managing unit-specific things like attendance, vehicle
checks, newsletters, on-call rosters, and so on.&lt;/p>
&lt;p>It&amp;rsquo;s actually a really useful tool, but there is one feature that really
annoys me&amp;hellip; The list of member contact details is only available as a PDF
and not a format that can be imported into your phone&amp;rsquo;s contacts.&lt;/p></description></item><item><title>FFI-Safe Polymorphism: Thin Trait Objects</title><link>https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/</link><pubDate>Wed, 16 Dec 2020 02:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/ffi-safe-polymorphism-in-rust/</guid><description>&lt;p>A while ago someone &lt;a href="https://users.rust-lang.org/t/ffi-c-file-and-good-rust-wrapper-equivalent-type/52050" class="external-link" target="_blank" rel="noopener">posted a question&lt;/a> on the Rust User Forums
asking how to achieve polymorphism in a C API and while lots of good
suggestions were made, I&amp;rsquo;d like to explore my take on things.&lt;/p>
&lt;p>As a recap, Rust provides two mechanisms for letting you write code which will
work with multiple types. These are&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Static Dispatch&lt;/strong>, where the compiler will generate multiple copies of the
function, tailor-made for each type and resolved at compile time, and&lt;/li>
&lt;li>&lt;strong>Dynamic Dispatch&lt;/strong>, where we use an extra level of indirection to only
resolve the actual implementation at runtime&lt;/li>
&lt;/ul>
&lt;p>While both mechanisms are extremely powerful and can cover almost all of your
needs in normal Rust code, they both have one drawback&amp;hellip; The actual
mechanisms used are (deliberately) unspecified and not safe for FFI.&lt;/p></description></item><item><title>How I Translate Feature Requests into Code</title><link>https://adventures.michaelfbryan.com/posts/turning-feature-requests-into-code/</link><pubDate>Wed, 02 Dec 2020 16:10:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/turning-feature-requests-into-code/</guid><description>&lt;p>As part of my previous job I worked on a CAD/CAM package, and a very common
task would be to take a vague feature description, rephrase it as a more
formal software problem, then use computational geometry algorithms to turn
it into code which can be integrated into the overall application.&lt;/p>
&lt;p>I eventually got quite good at this, so I&amp;rsquo;m going to write down the system I
came up with. This process works especially well for larger features which
add new functionality with minimal coupling to existing code.&lt;/p></description></item><item><title>Geometric Constraint Solvers Part 1: Algebraic Expressions</title><link>https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/</link><pubDate>Wed, 15 Jul 2020 00:40:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/</guid><description>&lt;p>A really powerful tool in Computer Aided Design (CAD) is the ability to apply
&lt;em>&amp;ldquo;constraints&amp;rdquo;&lt;/em> to your drawing. Constraints are a really powerful tool,
allowing the drafter to declare how parts of their drawing are related, then
letting the CAD program figure out how parameters can be manipulated in such
a way that&lt;/p>
&lt;p>You can think of a constraint as some sort of mathematical relationship between
two or more parameters.&lt;/p></description></item><item><title>Writing Non-Trivial Macros in Rust</title><link>https://adventures.michaelfbryan.com/posts/non-trivial-macros/</link><pubDate>Sun, 21 Jun 2020 01:15:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/non-trivial-macros/</guid><description>&lt;p>Macros in Rust tend to have a reputation for being complex and magical, the
likes which only seasoned wizards like &lt;a href="https://github.com/dtolnay" class="external-link" target="_blank" rel="noopener">&lt;code>@dtolnay&lt;/code>&lt;/a> can hope to
understand, let alone master.&lt;/p>
&lt;p>Rust&amp;rsquo;s declarative macros provide a mechanism for pattern matching on
arbitrary syntax to generate valid Rust code at compile time. I use them all
the time for simple search/replace style operations like generating tests
that have a lot of boilerplate, or straightforward trait implementations for
a large number of types.&lt;/p></description></item><item><title>Rust Closures in FFI</title><link>https://adventures.michaelfbryan.com/posts/rust-closures-in-ffi/</link><pubDate>Tue, 12 May 2020 22:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/rust-closures-in-ffi/</guid><description>&lt;p>Every now and then when using native libraries from Rust you&amp;rsquo;ll be asked to
pass a callback across the FFI boundary. The reasons are varied, but often
this might be done to notify the caller when &amp;ldquo;interesting&amp;rdquo; things happen, for
injecting logic (see the &lt;a href="https://sourcemaking.com/design_patterns/strategy" class="external-link" target="_blank" rel="noopener">Strategy Pattern&lt;/a>), or to handle the
result of an asynchronous operation.&lt;/p>
&lt;p>If this were normal Rust, we&amp;rsquo;d just accept a closure (e.g. a
&lt;code>Box&amp;lt;dyn Fn(...)&amp;gt;&lt;/code> or by being generic over any function-like type) and be
done with it. However, when working with other languages you are reduced to
the lowest common denominator, a the C language (or more specifically, the
ABI and machine code in general) doesn&amp;rsquo;t understand generics or Rust&amp;rsquo;s &amp;ldquo;fat&amp;rdquo;
pointers.&lt;/p></description></item><item><title>Creating a Robust, Reusable Link-Checker</title><link>https://adventures.michaelfbryan.com/posts/linkchecker/</link><pubDate>Sat, 02 May 2020 19:20:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/linkchecker/</guid><description>&lt;p>With over 68,842 downloads, one of my most successful Rust projects is a
nondescript little program called &lt;a href="https://github.com/Michael-F-Bryan/mdbook-linkcheck" class="external-link" target="_blank" rel="noopener">mdbook-linkcheck&lt;/a>. This
is a link-checker for &lt;a href="https://github.com/rust-lang/mdBook" class="external-link" target="_blank" rel="noopener">mdbook&lt;/a>, the tool powering a lot of
documentation in the Rust community, including &lt;a href="https://doc.rust-lang.org/book/" class="external-link" target="_blank" rel="noopener">&lt;em>The Rust Programming
Language&lt;/em>&lt;/a> and &lt;a href="https://rustc-dev-guide.rust-lang.org/" class="external-link" target="_blank" rel="noopener">&lt;em>The Rustc Dev Book&lt;/em>&lt;/a>.&lt;/p>
&lt;p>As an example of what it looks like, I recently found &lt;a href="https://github.com/rust-lang/chalk/pull/408/" class="external-link" target="_blank" rel="noopener">a couple&lt;/a>
broken links in &lt;a href="https://rust-lang.github.io/chalk/book/html/index.html" class="external-link" target="_blank" rel="noopener">the documentation&lt;/a> for Chalk. When the tool
detects broken links in your markdown it&amp;rsquo;ll emit error messages that point
you at the place the link is defined and explain what the issue is.&lt;/p></description></item><item><title>How I Reverse Engineered the LastPass CLI Tool</title><link>https://adventures.michaelfbryan.com/posts/lastpass/</link><pubDate>Tue, 14 Apr 2020 22:40:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/lastpass/</guid><description>&lt;p>A couple days ago I was writing an install script for &lt;a href="https://github.com/Michael-F-Bryan/dotfiles" class="external-link" target="_blank" rel="noopener">my dotfiles&lt;/a>
and reached a point where I wanted to grab some secrets (my SSH keys) from my
LastPass vault and copy them to the file system.&lt;/p>
&lt;p>This is easy enough to do using the browser plugin, or even when working with
their &lt;a href="https://github.com/lastpass/lastpass-cli" class="external-link" target="_blank" rel="noopener">command line tool (&lt;code>lpass&lt;/code>)&lt;/a> in an interactive way, but
I found there was no way to ask &lt;code>lpass&lt;/code> which files are attached to a secret,
and get the output in a machine readable format.&lt;/p></description></item><item><title>Reflections on What Motivates a Person</title><link>https://adventures.michaelfbryan.com/posts/motivation/</link><pubDate>Sun, 05 Apr 2020 19:15:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/motivation/</guid><description>&lt;p>Motivation is a funny thing.&lt;/p>
&lt;p>I&amp;rsquo;m someone who&amp;rsquo;s productivity levels change wildly depending on my
motivation levels. When I work on something which I&amp;rsquo;m passionate about or
which interests me on an intellectual level (e.g. computational geometry or
systems programming), I&amp;rsquo;m routinely 5-10x more productive than my peers.&lt;/p>
&lt;p>However, if I&amp;rsquo;m working on something which is less personally interesting
(e.g. tracking down GUI bugs or creating yet another CRUD app) I&amp;rsquo;ll tend to
drag my feet and not work as hard.&lt;/p></description></item><item><title>Line Simplification with Ramer–Douglas–Peucker</title><link>https://adventures.michaelfbryan.com/posts/line-simplification/</link><pubDate>Sun, 23 Feb 2020 21:56:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/line-simplification/</guid><description>&lt;p>The other day I needed to do a fairly routine graphical operation, to
&amp;ldquo;simplify&amp;rdquo; a polyline with many points into a simpler polyline which has
roughly the same shape plus or minus some &lt;code>tolerance&lt;/code> factor.&lt;/p>
&lt;p>My actual use case was in sending linear movements to a CNC machine. Drawings
are defined using floating point numbers and can be &amp;ldquo;accurate&amp;rdquo; to about 7-15
decimal places (depending on if you use floats or doubles) but when you take
the machine&amp;rsquo;s mechanical tolerances and material effects into account the
final cut is only really accurate to about 1 decimal place (0.1 mm). If I
were to simplify the path with a tolerance of, say, 0.05 mm I could massively
reduce the number of points sent to the machine (which reduces the amount of
data sent, buffer sizes, communications overhead, etc.) with minimal effect
on the accuracy.&lt;/p></description></item><item><title>A Pragmatic Approach To Global State</title><link>https://adventures.michaelfbryan.com/posts/pragmatic-global-state/</link><pubDate>Mon, 17 Feb 2020 22:22:47 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/pragmatic-global-state/</guid><description>&lt;p>One of the first things I learned when programming professionally is that
&lt;em>global variables are bad&lt;/em>. We all take it for granted that it&amp;rsquo;s bad practice
to write code that relies heavily on global state but the other day I was
working with a 3rd party native library, and it reminded &lt;em>why&lt;/em> these best
practices come about.&lt;/p>
&lt;p>There are a couple factors which made this particular library&amp;rsquo;s use of global
mutable state rather ugly to work with,&lt;/p></description></item><item><title>I Made A Thing: Markedit</title><link>https://adventures.michaelfbryan.com/posts/markedit/</link><pubDate>Sun, 09 Feb 2020 04:40:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/markedit/</guid><description>&lt;p>A couple days ago I released &lt;a href="https://crates.io/crates/markedit" class="external-link" target="_blank" rel="noopener">markedit&lt;/a>, a small crate for editing
unstructured markdown documents. This is a useful enough library that I
thought I&amp;rsquo;d explain the main ideas behind it and potential use cases.&lt;/p>
&lt;p>This originally came about when I was at work, preparing our application&amp;rsquo;s
change log before a release for the umpteenth time (we&amp;rsquo;ve found the &lt;a href="https://keepachangelog.com/en/1.0.0/" class="external-link" target="_blank" rel="noopener">keep a
changelog&lt;/a> format really useful) and on the drive home I started thinking
of ways to automate things.&lt;/p></description></item><item><title>Creating Interactive Applications While Maintaining Your Sanity</title><link>https://adventures.michaelfbryan.com/posts/implementing-interactive-applications/</link><pubDate>Thu, 06 Feb 2020 23:43:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/implementing-interactive-applications/</guid><description>&lt;p>One of the primary reasons computers are so ubiquitous in modern society is
their ability to let humans and software cooperate to achieve a desired goal.
That is, to be interactive.&lt;/p>
&lt;p>Creating interactive applications can be pretty annoying for a programmer.
Unlike a computer which is predictable and will blindly follow any
instructions given to it,&lt;/p>
&lt;ul>
&lt;li>Humans are unpredictable. They like to press buttons and push features further
than they were originally intended&lt;/li>
&lt;li>Humans have a habit of asking for special cases (&lt;em>&amp;ldquo;Feature X works really
well, but when I click on this triangle while holding shift and tilting my
head at an angle, it should really do Y instead. It&amp;rsquo;s not a big feature, can
you just add?&amp;rdquo;&lt;/em>)&lt;/li>
&lt;li>Humans often don&amp;rsquo;t know what they want, meaning even if you implement
something exactly as described to you users will still complain about it not
doing the right thing&lt;/li>
&lt;li>The real world is messy, and letting users interact with your program is a
really effective way of mixing the messy outside world with the nice
structured world inside a computer&lt;/li>
&lt;li>Also, users are the ones funding your pay check so you should probably try
to keep them happy 😁&lt;/li>
&lt;/ul>
&lt;p>The ideas and concepts shown in this article aren&amp;rsquo;t overly advanced. In fact,
if you&amp;rsquo;ve been programming for a couple months (especially if it&amp;rsquo;s part of a
formal Computer Science program) you&amp;rsquo;re probably already familiar with them.&lt;/p></description></item><item><title>Words Are Hard - An Essay on Communicating With Non-Programmers</title><link>https://adventures.michaelfbryan.com/posts/words-are-hard/</link><pubDate>Mon, 27 Jan 2020 10:20:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/words-are-hard/</guid><description>&lt;p>There&amp;rsquo;s a well-known saying about the hard problems in computer science, of
which I think this is my favourite variant,&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.&lt;/p>&amp;mdash; Leon Bambrick (@secretGeek) &lt;a href="https://twitter.com/secretGeek/status/7269997868?ref_src=twsrc%5Etfw">January 1, 2010&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>


&lt;p>I&amp;rsquo;ve been writing software long enough to be burned by all three at some
point, but as someone working in a small business who represents the software
side of our product and is constantly rubbing shoulders with non-programmers,
I believe the ability to correctly communicate an idea or concept in a way
that others can understand (i.e. to name things) is by far the most
important.&lt;/p></description></item><item><title>A Thought Experiment: Using the ECS Pattern Outside of Game Engines</title><link>https://adventures.michaelfbryan.com/posts/ecs-outside-of-games/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/ecs-outside-of-games/</guid><description>&lt;p>It&amp;rsquo;s been about 6 months since I watched Catherine West&amp;rsquo;s excellent &lt;a href="https://www.youtube.com/watch?v=aKLntZcp27M" class="external-link" target="_blank" rel="noopener">Using
Rust for Game Development&lt;/a> sent me down the &lt;em>Entity-Component-System&lt;/em>
(ECS) rabbit hole, and I thought I&amp;rsquo;d share some of my findings.&lt;/p>
&lt;p>I&amp;rsquo;ve been meaning to write about this for quite a while now but it took a
while to put my thoughts into a cohesive article without throwing massive
walls of code at you.&lt;/p>

&lt;div class="notices note" >
 &lt;p>This article is mainly focused around the high-level decisions you make when
designing a project, so there won&amp;rsquo;t be as much code as normal. That said, all
code written in this article is available &lt;a href="https://github.com/Michael-F-Bryan/arcs" class="external-link" target="_blank" rel="noopener">on GitHub&lt;/a>. Feel free to
browse through and steal code or inspiration.&lt;/p></description></item><item><title>WebAssembly as a Platform for Abstraction</title><link>https://adventures.michaelfbryan.com/posts/wasm-as-a-platform-for-abstraction/</link><pubDate>Sun, 15 Dec 2019 11:55:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/wasm-as-a-platform-for-abstraction/</guid><description>&lt;p>In a project I&amp;rsquo;ve been playing around with recently, we&amp;rsquo;ve encountered the
dilemma where you want to make it easy for users to write their own
application logic using the system but at the same time want to keep that logic
decoupled from the implementation details of whatever platform the
application is running on.&lt;/p>
&lt;p>If you&amp;rsquo;ve been programming for any amount of time your immediate reaction is
probably &lt;em>&amp;ldquo;why bother mentioning this, doesn&amp;rsquo;t it just fall out of good
library design?&amp;rdquo;&lt;/em>, and normally I would totally agree with you, except I
forgot to mention a couple of important details&amp;hellip;&lt;/p></description></item><item><title>How to RiiR</title><link>https://adventures.michaelfbryan.com/posts/how-to-riir/</link><pubDate>Mon, 02 Dec 2019 01:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/how-to-riir/</guid><description>&lt;p>In &lt;a href="https://adventures.michaelfbryan.com/posts/how-not-to-riir/" >a previous article&lt;/a> we&amp;rsquo;ve talked about how you can avoid
rewriting a library in Rust when you don&amp;rsquo;t need to. But what about the times
when you really &lt;em>do&lt;/em> need to?&lt;/p>
&lt;p>In most languages you&amp;rsquo;d need to rewrite the entire library from the ground
up, waiting until the port is almost finished before you can start seeing
results. These sorts of ports tend to be quite expensive and error-prone, and
often they&amp;rsquo;ll fail midway and you&amp;rsquo;ll have nothing to show for your effort.
&lt;em>Joel Spolsky&lt;/em> does a much better job of explaining this than I ever could, see
&lt;a href="https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/" class="external-link" target="_blank" rel="noopener">his article on why full rewrites are a bad idea&lt;/a> for more.&lt;/p></description></item><item><title>Implementing ArrayVec Using Const Generics</title><link>https://adventures.michaelfbryan.com/posts/const-arrayvec/</link><pubDate>Fri, 15 Nov 2019 00:57:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/const-arrayvec/</guid><description>&lt;p>If you&amp;rsquo;ve ever done much embedded programming in Rust, you&amp;rsquo;ve most probably run
across the &lt;a href="https://crates.io/crates/arrayvec" class="external-link" target="_blank" rel="noopener">&lt;code>arrayvec&lt;/code>&lt;/a> crate before. It&amp;rsquo;s awesome. The main purpose
of the crate is to provide the &lt;code>ArrayVec&lt;/code> type, which is essentially like
&lt;code>Vec&amp;lt;T&amp;gt;&lt;/code> from the standard library, but backed by an array instead of some
memory on the heap.&lt;/p>
&lt;p>One of the problems I ran into while writing the &lt;em>Motion Planning&lt;/em> chapter of my
&lt;a href="http://adventures.michaelfbryan.com/tags/adventures-in-motion-control/" class="external-link" target="_blank" rel="noopener">Adventures in Motion Control&lt;/a> was deciding how far ahead my motion
planner should plan.&lt;/p></description></item><item><title>Audio Processing for Dummies</title><link>https://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</link><pubDate>Sun, 27 Oct 2019 23:34:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/audio-processing-for-dummies/</guid><description>&lt;p>In my spare time I&amp;rsquo;m an emergency services volunteer, and one of the tasks our
unit has is to run the radio network and keep track of what&amp;rsquo;s happening. This
can be a pretty stressful job, especially when there&amp;rsquo;s lots of radio traffic,
and it&amp;rsquo;s not unusual to miss words or entire transmissions.&lt;/p>
&lt;p>To help with a personal project that could make the job easier I&amp;rsquo;d like to
implement a basic component of audio processing, the &lt;a href="https://en.wikipedia.org/wiki/Noise_gate" class="external-link" target="_blank" rel="noopener">Noise Gate&lt;/a>.&lt;/p></description></item><item><title>How to not RiiR</title><link>https://adventures.michaelfbryan.com/posts/how-not-to-riir/</link><pubDate>Sun, 20 Oct 2019 19:45:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/how-not-to-riir/</guid><description>&lt;p>Once you get past the growing pains of the &lt;em>Borrow Checker&lt;/em> and realise Rust
gives you the power to do things which would be unheard of (or just plain
dangerous) in other languages, the temptation to &lt;a href="https://transitiontech.ca/random/RIIR" class="external-link" target="_blank" rel="noopener">&lt;em>Rewrite it in Rust&lt;/em>&lt;/a>
can be quite strong. However at best, the temptation to &lt;em>RiiR&lt;/em> is unproductive
(unnecessary duplication of effort), and at worst it can promote the creation
of buggy software (why would &lt;em>you&lt;/em> be better equipped to write a library for
some domain-specific purpose than the original author?).&lt;/p></description></item><item><title>Working With G-Code</title><link>https://adventures.michaelfbryan.com/posts/working-with-gcode/</link><pubDate>Fri, 18 Oct 2019 00:05:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/working-with-gcode/</guid><description>&lt;p>As mentioned in &lt;a href="https://adventures.michaelfbryan.com/posts/wiring-up-communication/#the-next-step" >the previous post&lt;/a> there are a handful of tasks
which may be tackled next, but only one of them really allows us to make progress
towards our goal of implementing the simulated firmware for a 3D Printer.&lt;/p>
&lt;p>Let&amp;rsquo;s send the motion controller some g-code.&lt;/p>
&lt;h2 id="creating-message-types">
 Creating Message types
 &lt;a class="heading-link" href="#creating-message-types">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>If we want to send g-code programs between the frontend and backend we&amp;rsquo;ll need
to make a couple message definitions.&lt;/p></description></item><item><title>Wiring Up Communication</title><link>https://adventures.michaelfbryan.com/posts/wiring-up-communication/</link><pubDate>Thu, 10 Oct 2019 22:58:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/wiring-up-communication/</guid><description>&lt;p>As we mentioned &lt;a href="https://adventures.michaelfbryan.com/posts/a-better-frontend/#the-next-step" >in the last AiMC post&lt;/a>, the next task is to wire up
communications between the simulator&amp;rsquo;s backend and frontend.&lt;/p>
&lt;p>As a general rule, our frontend will have two communication regimes:&lt;/p>
&lt;ol>
&lt;li>When something happens (e.g. a button is pressed or a job starts sending),
the frontend will send a batch of messages to the backend and interpret the
response&lt;/li>
&lt;li>The frontend will continually poll the backend&amp;rsquo;s state in the background
(e.g. at 10Hz)&lt;/li>
&lt;/ol>
&lt;p>As it is, the &lt;code>Browser&lt;/code> in our WASM code already provides a method for
sending data to the frontend (&lt;a href="https://michael-f-bryan.github.io/adventures-in-motion-control/aimc_sim/struct.Browser.html#method.send_data" class="external-link" target="_blank" rel="noopener">&lt;code>Browser::send_data()&lt;/code>&lt;/a>) and
receiving data from the frontend (&lt;a href="https://michael-f-bryan.github.io/adventures-in-motion-control/aimc_sim/struct.App.html#method.on_data_received" class="external-link" target="_blank" rel="noopener">&lt;code>App::on_data_received()&lt;/code>&lt;/a>) so
we shouldn&amp;rsquo;t need to write any Rust code.&lt;/p></description></item><item><title>Plugins in Rust</title><link>https://adventures.michaelfbryan.com/posts/plugins-in-rust/</link><pubDate>Mon, 30 Sep 2019 22:04:58 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/plugins-in-rust/</guid><description>&lt;p>Imagine you are implementing a calculator application and want users to be able
to extend the application with their own functionality. For example, imagine a
user wants to provide a &lt;code>random()&lt;/code> function that generates &lt;em>true&lt;/em> random numbers
using &lt;a href="https://random.org/" class="external-link" target="_blank" rel="noopener">random.org&lt;/a> instead of the pseudo-random numbers that a crate like
&lt;a href="https://crates.io/crates/rand" class="external-link" target="_blank" rel="noopener">rand&lt;/a> would provide.&lt;/p>
&lt;p>The Rust language gives you a lot of really powerful tools for adding
flexibility and extensibility to your applications (e.g. traits, enums,
macros), but all of these happen at compile time. Unfortunately, to get the
flexibility that we&amp;rsquo;re looking we&amp;rsquo;ll need to be able to add new functionalty at
runtime.&lt;/p></description></item><item><title>A Better Frontend</title><link>https://adventures.michaelfbryan.com/posts/a-better-frontend/</link><pubDate>Fri, 27 Sep 2019 03:47:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/a-better-frontend/</guid><description>&lt;p>Now we&amp;rsquo;ve got a half-usable motion controller, we need a graphical way for
humans to interact with it. The controller runs in a browser, which makes
&lt;a href="https://vuejs.org/" class="external-link" target="_blank" rel="noopener">Vue&lt;/a> a perfect candidate for the UI.&lt;/p>
&lt;h2 id="adding-vue-to-the-frontend">
 Adding Vue to the Frontend
 &lt;a class="heading-link" href="#adding-vue-to-the-frontend">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Now, we don&amp;rsquo;t actually have much frontend code (47 lines of JavaScript to be
exact) so it&amp;rsquo;s actually easier to delete the existing &lt;code>frontend&lt;/code> and use the
&lt;a href="https://cli.vuejs.org/guide/installation.html" class="external-link" target="_blank" rel="noopener">&lt;code>vue&lt;/code> CLI tool&lt;/a> to create a new one.&lt;/p></description></item><item><title>Initial Motion System</title><link>https://adventures.michaelfbryan.com/posts/initial-motion-system/</link><pubDate>Wed, 18 Sep 2019 20:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/initial-motion-system/</guid><description>&lt;p>Now we&amp;rsquo;ve got &lt;a href="https://adventures.michaelfbryan.com/posts/simple-automation-sequences/#the-next-step" >some simple automation&lt;/a> code, lets start a proper
&lt;em>Motion&lt;/em> system.&lt;/p>
&lt;p>Most &lt;em>Motion&lt;/em> systems are designed around a &lt;em>&amp;ldquo;control mode&amp;rdquo;&lt;/em>, a fancy term for
&lt;em>&amp;ldquo;what is the machine doing right now?&amp;rdquo;&lt;/em> Common control modes are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Idle&lt;/code> - the default control mode, machines revert to &lt;code>Idle&lt;/code> whenever they&amp;rsquo;re
not doing anything&lt;/li>
&lt;li>&lt;code>Automation&lt;/code> - running an automation sequence&lt;/li>
&lt;li>&lt;code>Recipe&lt;/code> - executing a job (a set of instructions for how to execute a job
and the motion parameters that should be used is often referred to as a
&lt;em>Recipe&lt;/em>)&lt;/li>
&lt;li>&lt;code>Manual&lt;/code> - manual movement, where velocity may be controlled via a handset
or the user invokes a &lt;em>&amp;ldquo;jog to position&amp;rdquo;&lt;/em> function&lt;/li>
&lt;/ul>
&lt;p>There are several ways to transition between control modes.&lt;/p></description></item><item><title>Simple Automation Sequences</title><link>https://adventures.michaelfbryan.com/posts/simple-automation-sequences/</link><pubDate>Sat, 14 Sep 2019 23:55:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/simple-automation-sequences/</guid><description>&lt;p>Now we can communicate with the outside world, let&amp;rsquo;s start interacting with the
&amp;ldquo;hardware&amp;rdquo; attached to our motion controller. This will be the beginning of our
&lt;em>Motion&lt;/em> system.&lt;/p>
&lt;p>The simplest way to interact with the world is by executing a pre-defined
routine, and one of the simplest useful routines is to move all axes to the
home position.&lt;/p>
&lt;h2 id="system-inputs-and-outputs">
 System Inputs and Outputs
 &lt;a class="heading-link" href="#system-inputs-and-outputs">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>From our &lt;a href="https://adventures.michaelfbryan.com/posts/announcing-adventures-in-motion-control/#identifying-requirements-and-subsystems" >initial requirements gathering&lt;/a> we know that our 3D
printer will have three linear axes (X, Y, and Z), with limit switches at the
ends of each axis. This gives our new &lt;em>Motion&lt;/em> system six inputs to deal with.&lt;/p></description></item><item><title>The Communications System: Part 2</title><link>https://adventures.michaelfbryan.com/posts/comms-part-2/</link><pubDate>Sun, 08 Sep 2019 01:20:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/comms-part-2/</guid><description>&lt;p>Now we have a mechanism for transferring bytes from the frontend to the
simulator and back again, we need to translate those bytes into higher-level
messages. Luckily each [&lt;code>anpp::Packet&lt;/code>] contains an &lt;a href="https://docs.rs/anpp/1.0.1/anpp/struct.Packet.html#method.id" class="external-link" target="_blank" rel="noopener">&lt;code>ID&lt;/code> field&lt;/a> that
is designed specifically for this purpose.&lt;/p>
&lt;p>That lets us do something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// (not real code)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ping,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StatusCheck,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ProgramChunk {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chunk_number: &lt;span style="color:#66d9ef">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> [&lt;span style="color:#66d9ef">u8&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">UnknownMessageError&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">parse_packet&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(pkt: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span> &lt;span style="color:#a6e22e">Packet&lt;/span>) -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>Message&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;a&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, UnknownMessageError&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> pkt.id() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(Message::Ping),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(Message::StatusCheck),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(&lt;span style="color:#f92672">..&lt;/span>.),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Err(UnknownMessageError),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The top-level &lt;code>App&lt;/code> can handle messages by routing them to the appropriate
system and invoking a message handler.&lt;/p></description></item><item><title>The Communications System: Part 1</title><link>https://adventures.michaelfbryan.com/posts/comms-part-1/</link><pubDate>Fri, 06 Sep 2019 23:00:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/comms-part-1/</guid><description>&lt;h2 id="prelude">
 Prelude
 &lt;a class="heading-link" href="#prelude">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>The &lt;em>Communications&lt;/em> system is arguably one of the most important parts of
our simulator. After all, it&amp;rsquo;s kinda hard to debug a program when you can&amp;rsquo;t
ask it why something isn&amp;rsquo;t working.&lt;/p>
&lt;p>The user will interact with our simulated motion controller via a single
&lt;em>Serial Port&lt;/em>, which we&amp;rsquo;ll be modelling as a simple thing which sends and
receives bytes. Serial ports are a fairly old technology, and have several
drawbacks compared to the Ethernet and TCP protocols that most programmers
are familiar with.&lt;/p></description></item><item><title>FPS Counter</title><link>https://adventures.michaelfbryan.com/posts/fps-counter/</link><pubDate>Tue, 03 Sep 2019 08:50:00 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/fps-counter/</guid><description>&lt;p>As mentioned in &lt;a href="https://adventures.michaelfbryan.com/posts/top-level-infrastructure/#the-next-step" >the previous article&lt;/a> the next task is to
implement our first proper &lt;code>System&lt;/code>, the &lt;code>FpsCounter&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>A relatively easy, yet important, component is some sort of FPS counter.
Ideally there’ll be a bit of text in the corner showing the number of
&lt;code>poll()&lt;/code>s per second and the average duration. That way we can get a better
feel for our simulator’s performance characteristics.&lt;/p>&lt;/blockquote>
&lt;p>An &lt;code>FpsCounter&lt;/code> has two responsibilities,&lt;/p></description></item><item><title>Top-Level Infrastructure</title><link>https://adventures.michaelfbryan.com/posts/top-level-infrastructure/</link><pubDate>Mon, 02 Sep 2019 21:22:30 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/top-level-infrastructure/</guid><description>&lt;p>As mentioned in &lt;a href="https://adventures.michaelfbryan.com/posts/announcing-adventures-in-motion-control/#the-next-step" >the intro article&lt;/a>, the first task will be to set
up the application&amp;rsquo;s structure and define how the various components will
communicate.&lt;/p>
&lt;h2 id="multitasking">
 Multitasking
 &lt;a class="heading-link" href="#multitasking">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Most embedded systems will implement multi-tasking by rapidly polling each
system within an infinite loop.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poll_comms();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poll_motion_planning();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poll_io();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> poll_machine_events();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A motion controller will normally spend most of its time polling, but there are
places where polling isn&amp;rsquo;t appropriate. For example, accurate movement of a
stepper motor relies on sending pulses at very precise times. Another scenario
is in the handling of communication, where waiting for the next poll to read a
byte may result in missing part of a message.&lt;/p></description></item><item><title>Announcing Adventures in Motion Control</title><link>https://adventures.michaelfbryan.com/posts/announcing-adventures-in-motion-control/</link><pubDate>Sun, 01 Sep 2019 16:27:15 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/announcing-adventures-in-motion-control/</guid><description>&lt;p>This is the first installation in my &lt;em>Adventures in Motion Control&lt;/em> series.&lt;/p>
&lt;p>At &lt;code>$JOB&lt;/code> we build industrial CNC machines, and while developing a simulator
for our machines I noticed a distinct lack of online resources on how
they work under the hood. Hopefully this series will address the situation.&lt;/p>
&lt;h2 id="the-goal">
 The Goal
 &lt;a class="heading-link" href="#the-goal">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>The goal for this series is to develop a simulator which will accurately reflect
how an embedded motion controller is implemented internally.&lt;/p></description></item></channel></rss>