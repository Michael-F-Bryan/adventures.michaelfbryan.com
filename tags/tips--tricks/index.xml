<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tips &amp; Tricks on Michael-F-Bryan</title><link>https://adventures.michaelfbryan.com/tags/tips--tricks/</link><description>Recent content in Tips &amp; Tricks on Michael-F-Bryan</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 01 Apr 2025 09:19:10 +0800</lastBuildDate><atom:link href="https://adventures.michaelfbryan.com/tags/tips--tricks/index.xml" rel="self" type="application/rss+xml"/><item><title>Link Time Dependency Injection</title><link>https://adventures.michaelfbryan.com/posts/the-linker-trick/</link><pubDate>Sun, 30 Mar 2025 12:59:58 +0800</pubDate><guid>https://adventures.michaelfbryan.com/posts/the-linker-trick/</guid><description>&lt;p>Have you ever been in a situation where, because of how the code is structured, it&amp;rsquo;s practically impossible to inject a dependency into the component that needs it? Even global variables - ubiquitously reviled for their ability to do &amp;ldquo;spooky action at a distance&amp;rdquo; - weren&amp;rsquo;t spooky enough.&lt;/p>
&lt;p>In this article, I&amp;rsquo;ll share a technique I discovered while working on a WebAssembly-based CAD package that allows for dependency injection at link time. This technique is particularly useful when traditional dependency injection methods aren&amp;rsquo;t available or practical.&lt;/p></description></item></channel></rss>